# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: ci cd for cheerdo 

on:
  push:
    branches: [ "master" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
   ## gradle caching
    - name: Gradle Caching
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
  ## create application.properties
    - name: make application.yml
      run: |
        cd ./src/main/resources
        touch ./application.yml
        echo "${{ secrets.PROPERTIES }}" > ./application.yml
      shell: bash
  ## create application-dev.properties
    - name: make application-dev.yml
      run: |
        cd ./src/main/resources
        touch ./application-dev.yml
        echo "${{ secrets.PROPERTIES_DEV }}" > ./application-dev.yml
      shell: bash
  ## gradle build
    - name: Make gradlew executable
      run: chmod +x ./gradlew
    - name: Build with Gradle
      run: ./gradlew clean build -x test
  ## docker build & push to production
    - name: Docker build & push to prod
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }}/cheerdo .
          docker push ${{ secrets.DOCKER_REPO }}/cheerdo
  ## deploy
    - name: Deploy
      uses: appleboy/ssh-action@master
      id: deploy-prod
      with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.NCP_SERVER_USER }}
          password: ${{ secrets.NCP_SERVER_PASSWORD }}
          port: ${{ secrets.NCP_SERVER_SSH_PORT }}
          script: |
              sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
              sudo docker rm -f ${{ secrets.DOCKER_CONTAINER_NAME }}-container
              docker create --name ${{ secrets.DOCKER_CONTAINER_NAME }}-container -p 8088:8080 -e TZ=Asia/Seoul ${{ secrets.DOCKER_REPO }}/cheerdo
              docker start ${{ secrets.DOCKER_CONTAINER_NAME }}-container
              docker image prune -f  
